generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionModality {
  pulso
  clima
}

enum QuestionType {
  qualitativa
  quantitativa
}

model Search {
  id        Int      @id @default(autoincrement())
  titulo    String
  tipo      String
  perguntas Json
  createdAt DateTime @default(now())
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  // Novo relacionamento many-to-many para escopo por múltiplos setores
  departments SurveyDepartment[]

  @@map("survey")
}

model User {
  id             Int             @id @default(autoincrement())
  internal_id    Int
  first_Name     String
  last_Name      String
  email          String          @unique
  password       String
  role           UserRole        @default(employee)
  created_at     DateTime        @default(now())
  // companyId agora opcional para permitir usuários de suporte sem vínculo
  companyId      Int?
  departmentId   Int?
  avatar         Bytes?
  avatarMimeType String?
  resetToken     String?         @unique
  resetTokenExpires DateTime?
  climaResponses ClimaResponse[]
  notifications  Notification[]
  pulseResponses PulseResponse[]
  // Relação também opcional
  company        Company?        @relation(fields: [companyId], references: [id])
  department     Department?     @relation(fields: [departmentId], references: [id])
  ativo          Boolean         @default(true)
  @@unique([companyId, internal_id])
}

model Company {
  id             Int          @id @default(autoincrement())
  name           String
  cnpj           String       @unique
  address        String
  addressZipCode Int
  neighborhood   String
  municipality   String
  state          String
  country        String
  phone          String
  departments    Department[]
  users          User[]
  searches       Search[]
  pulseResponses PulseResponse[]
  climaResponses ClimaResponse[]
  questions     Question[]
}

model Department {
  id        Int     @id @default(autoincrement())
  name      String
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  users     User[]
  searches  Search[]
  // Link table para pesquisas direcionadas a múltiplos departamentos
  surveyLinks SurveyDepartment[]
}

model Question {
  id            Int               @id @default(autoincrement())
  texto         String
  descricaoBusca String?
  modalidade    QuestionModality
  tipoResposta  QuestionType
  createdAt     DateTime          @default(now())
  companyId     Int?
  company       Company?          @relation(fields: [companyId], references: [id])
  ativo         Boolean           @default(true)
}

// DiaryEntry e ReasonEmotion removidos

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PulseResponse {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt  DateTime @default(now())
  answers    Json
  pesquisaId Int
  user       User     @relation(fields: [userId], references: [id])
  companyId  Int?
  company    Company? @relation(fields: [companyId], references: [id])

  @@unique([userId, pesquisaId])
}

model ClimaResponse {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt  DateTime @default(now())
  answers    Json
  pesquisaId Int
  user       User     @relation(fields: [userId], references: [id])
  companyId  Int?
  company    Company? @relation(fields: [companyId], references: [id])

  @@unique([userId, pesquisaId])
}

enum UserRole {
  admin
  employee
  support
}

// Tabela de junção para permitir que uma pesquisa seja direcionada a múltiplos departamentos.
model SurveyDepartment {
  id           Int        @id @default(autoincrement())
  searchId     Int
  departmentId Int
  search       Search     @relation(fields: [searchId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([searchId, departmentId])
  @@map("survey_department")
}
