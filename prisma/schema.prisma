generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Search {
  id        Int      @id @default(autoincrement())
  titulo    String
  tipo      String
  perguntas Json
  createdAt DateTime @default(now())

  @@map("searches")
}

model User {
  id             Int             @id @default(autoincrement())
  internal_id    Int
  first_Name     String
  last_Name      String
  email          String          @unique
  password       String
  role           UserRole        @default(employee)
  created_at     DateTime        @default(now())
  // companyId agora opcional para permitir usuários de suporte sem vínculo
  companyId      Int?
  departmentId   Int?
  avatar         Bytes?
  avatarMimeType String?
  climaResponses ClimaResponse[]
  diaryEntries   DiaryEntry[]
  knowledges     Knowledge[]     @relation("UserToKnowledge")
  notifications  Notification[]
  pulseResponses PulseResponse[]
  // Relação também opcional
  company        Company?        @relation(fields: [companyId], references: [id])
  department     Department?     @relation(fields: [departmentId], references: [id])
}

model Company {
  id             Int          @id @default(autoincrement())
  name           String
  cnpj           String       @unique
  address        String
  addressZipCode Int
  neighborhood   String
  municipality   String
  state          String
  country        String
  phone          Int
  departments    Department[]
  users          User[]
}

model Department {
  id        Int     @id @default(autoincrement())
  name      String
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  users     User[]
}

model DiaryEntry {
  id          Int             @id @default(autoincrement())
  date        DateTime
  emotion     String
  description String
  created_at  DateTime        @default(now())
  userId      Int
  user        User            @relation(fields: [userId], references: [id])
  reasons     ReasonEmotion[] @relation("DiaryEntryToReasonEmotion")
}

model ReasonEmotion {
  id           Int          @id @default(autoincrement())
  reason       String       @unique
  diaryEntries DiaryEntry[] @relation("DiaryEntryToReasonEmotion")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Knowledge {
  id             Int       @id @default(autoincrement())
  url            String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
  createdBy_user Int
  anexo          Bytes?
  createdBy      User      @relation("UserToKnowledge", fields: [createdBy_user], references: [id])
}

model SupportMaterial {
  id                Int       @id @default(autoincrement())
  url               String?
  emotion           String?
  reason_emotion_id Int?
  created_at        DateTime  @default(now())
  deleted_at        DateTime?
  anexo             Bytes?
}

model PulseResponse {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt  DateTime @default(now())
  answers    Json
  pesquisaId Int
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, pesquisaId])
}

model ClimaResponse {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt  DateTime @default(now())
  answers    Json
  pesquisaId Int
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, pesquisaId])
}

enum UserRole {
  admin
  employee
  support
}
